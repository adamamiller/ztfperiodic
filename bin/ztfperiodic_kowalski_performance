
import os, sys, pickle
import glob
import optparse

import tables
import pandas as pd
import numpy as np
from astropy.time import Time

import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 28})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
from matplotlib.colors import LogNorm

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("-c","--condorDir",default="/home/michael.coughlin/ZTF/output_ontological_ids_DR2/condor/")
    parser.add_option("-r","--runtype",default="periods")
    parser.add_option("--doScaling",  action="store_true", default=False)

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

outputDir = os.path.join(opts.condorDir,"performance")
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

pcklFile = os.path.join(outputDir,"data.pkl")
logsDir = os.path.join(opts.condorDir,"logs")

if not os.path.isfile(pcklFile):
    logfiles = glob.glob(os.path.join(logsDir,"*out*"))
    analysis_times, kowalski_times, objects = [], [], []

    if opts.runtype == "periods":
        data_out = np.empty((0,6))
        #logfiles = logfiles[:1000]
        for ii, logfile in enumerate(logfiles):
            num = int(logfile.split("/")[-1].split(".")[-1])

            if np.mod(ii,100) == 0:
                print('Loading %d/%d' % (ii, len(logfiles)))
        
            try:
                lines = [line.rstrip('\n') for line in open(logfile)]
            except:
                continue
         
            data = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, num])
            for line in lines:
                lineSplit = list(filter(None,line.split(" ")))
                if "Number of lightcurves" in line:
                    data[0] = int(lineSplit[-1])
                elif "Loaded" in line:
                    data[2] = int(lineSplit[1])
                    data[3] = float(lineSplit[-2])
                elif "Lightcurve analysis" in line:
                    data[1] = float(lineSplit[-2])        
                elif "Lightcurve statistics" in line:
                    data[4] = float(lineSplit[-2])   
    
                    data_out = np.append(data_out,np.atleast_2d(data), axis=0)
                    data = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, num])

    elif opts.runtype == "features":
        data_out = np.empty((0,5))
        #logfiles = logfiles[:1000]
        for ii, logfile in enumerate(logfiles):
            num = int(logfile.split("/")[-1].split(".")[-1])
            tm = os.path.getctime(logfile)
            t = Time(tm, format='unix', scale='utc')

            if np.mod(ii,100) == 0:
                print('Loading %d/%d' % (ii, len(logfiles)))
 
            try:
                lines = [line.rstrip('\n') for line in open(logfile)]
            except:
                continue
 
            data = np.array([np.nan, np.nan, np.nan, num, t.mjd])
            for line in lines:
                lineSplit = list(filter(None,line.split(" ")))
                if "Loaded" in line:
                    data[0] = int(lineSplit[1])
                    data[2] = float(lineSplit[-2])
                elif "Lightcurve analysis" in line:
                    data[1] = float(lineSplit[-2])
                    data_out = np.append(data_out,np.atleast_2d(data), axis=0)
                    data = np.array([np.nan, np.nan, np.nan, num, t.mjd])

    f = open(pcklFile, 'wb')
    pickle.dump((data_out), f)
    f.close()

with open(pcklFile, 'rb') as handle:
    data_out = pickle.load(handle)

if opts.runtype == "periods":

    xedges = np.logspace(1,3,50)
    yedges = np.logspace(2,4,50)
    
    H, xedges, yedges = np.histogram2d(data_out[:,3], data_out[:,2], bins=(xedges, yedges))
    H = H.T  # Let each row list bins with common y range.
    X, Y = np.meshgrid(xedges, yedges)
    H[H==0] = 1e-5
    
    plotName = os.path.join(outputDir, "kowalski.pdf")
    plt.figure(figsize=(12,8))
    ax = plt.gca()
    c = plt.pcolormesh(X, Y, H, vmin=1.0,vmax=np.max(H),norm=LogNorm())
    plt.ylabel('Number of objects')
    plt.xlabel('Load Time [s]')
    cbar = plt.colorbar(c)
    cbar.set_label('Counts')
    ax.set_xscale('log')
    ax.set_yscale('log')
    #ax.set_xticks([10,100,1000])
    #plt.xlim([1,1000])
    #plt.ylim([100,10000])
    #ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()
    
    xedges = np.logspace(-1,3.0,50)
    yedges = np.logspace(2,4,50)
    
    idx = np.where(~np.isnan(data_out[:,0]))[0]
    H, xedges, yedges = np.histogram2d(data_out[idx,1], data_out[idx,0], bins=(xedges, yedges))
    H = H.T  # Let each row list bins with common y range.
    X, Y = np.meshgrid(xedges, yedges)
    H[H==0] = 1e-5
    
    plotName = os.path.join(outputDir, "period_finding.pdf")
    plt.figure(figsize=(12,8))
    ax = plt.gca()
    c = plt.pcolormesh(X, Y, H, vmin=1.0,vmax=np.max(H),norm=LogNorm())
    plt.xlabel('Analysis Time [s]')
    plt.ylabel('Number of objects')
    cbar = plt.colorbar(c)
    cbar.set_label('Counts')
    ax.set_xscale('log')
    ax.set_yscale('log')
    plt.xlim([1,1000])
    plt.ylim([100,10000])
    #ax.set_xticks([0.1,1,10])
    #ax.set_yticks([10,100,1000])
    ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()
    
    xedges = np.logspace(-1,3.0,50)
    yedges = np.logspace(2,4,50)
    
    idx = np.where(~np.isnan(data_out[:,0]))[0]
    H, xedges, yedges = np.histogram2d(data_out[idx,4], data_out[idx,0], bins=(xedges, yedges))
    H = H.T  # Let each row list bins with common y range.
    X, Y = np.meshgrid(xedges, yedges)
    H[H==0] = 1e-5
    
    plotName = os.path.join(outputDir, "statistics.pdf")
    plt.figure(figsize=(12,8))
    ax = plt.gca()
    c = plt.pcolormesh(X, Y, H, vmin=1.0,vmax=np.max(H),norm=LogNorm())
    plt.xlabel('Analysis Time [s]')
    plt.ylabel('Number of objects')
    cbar = plt.colorbar(c)
    cbar.set_label('Counts')
    ax.set_xscale('log')
    ax.set_yscale('log')
    plt.xlim([1,1000])
    plt.ylim([100,10000])
    #ax.set_xticks([0.1,1,10])
    #ax.set_yticks([10,100,1000])
    ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()

elif opts.runtype == "features":

    bins = np.logspace(-3,0,50)
    hist, bin_edges = np.histogram(data_out[:,2]/data_out[:,0], bins=bins)
    bins = (bin_edges[1:] + bin_edges[:-1])/2.0
 
    plotName = os.path.join(outputDir, "classification.pdf")
    plt.figure(figsize=(12,8))
    ax = plt.gca()

    bins = np.logspace(-3,0,50)
    hist, bin_edges = np.histogram(data_out[:,2]/data_out[:,0], bins=bins)
    bins = (bin_edges[1:] + bin_edges[:-1])/2.0
    plt.plot(bins, hist, color = 'k', linestyle='-', drawstyle='steps',
             label='Kowalski Time')

    bins = np.logspace(-3,-1,50)
    hist, bin_edges = np.histogram(data_out[:,1]/data_out[:,0], bins=bins)
    bins = (bin_edges[1:] + bin_edges[:-1])/2.0
    plt.plot(bins, hist, color = 'r', linestyle='--', drawstyle='steps',
             label='Classification Time')

    plt.legend()
    plt.xlabel('Time / Object [s]')
    ax.set_xscale('log')
    ax.set_yscale('log')
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()

    T0 = np.min(data_out[:,4])

    plotName = os.path.join(outputDir, "classification_vs_time.pdf")
    plt.figure(figsize=(12,8))
    ax = plt.gca()

    plt.plot(data_out[:,4]-T0, data_out[:,2]/data_out[:,0], 'kx', label='Kowalski Time')
    plt.plot(data_out[:,4]-T0, data_out[:,1]/data_out[:,0], 'r*', label='Classification Time')
    plt.legend()
    plt.xlabel('Days since %s' % (Time(T0, format='mjd').isot))
    plt.ylabel('Time / Object [s]')
    #ax.invert_xaxis()
    ax.set_yscale('log')
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()

if opts.doScaling:
    
    ngpus = int(np.max(data_out[:,4]))
    nlcurves = np.zeros((ngpus,1))
    for ii in range(ngpus):
        idx = np.where(data_out[:,4] == ii)[0]
        nlcurves[ii] = np.nansum(data_out[idx,0]) / np.nansum(data_out[idx,1])
    
    filename = os.path.join(outputDir,'scaling.npz')
    np.savez(filename, nlcurves=nlcurves, data_out=data_out)
    
    color1 = 'cornflowerblue'
    color2 = 'coral'
    
    nsamples = 500
    
    fig = plt.figure(figsize=(14,8))
    ax = plt.gca()
    for ii in range(ngpus):
        vals = np.zeros((nsamples,1))
        cnt = ii + 1
        for jj in range(nsamples):    
            idx = np.random.permutation(np.arange(ngpus))
            idx = idx[:cnt]
            vals[jj] = np.sum(nlcurves[idx])
    
        parts = plt.violinplot(vals,[cnt],widths=0.25)
        for partname in ('cbars','cmins','cmaxes'):
            vp = parts[partname]
            vp.set_edgecolor(color1)
            vp.set_linewidth(1)
        for pc in parts['bodies']:
            pc.set_facecolor(color1)
            pc.set_edgecolor(color1)
    
    #plt.xticks([2**0,2**1,2**2,2**3])
    plt.grid()
    plt.xlabel(r'Number of GPUs')
    plt.ylabel('Lightcurves Analyzed per second')
    ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())
    
    plotName = os.path.join(outputDir,'scaling.pdf')
    plt.savefig(plotName, bbox_inches='tight')
    plt.close()
