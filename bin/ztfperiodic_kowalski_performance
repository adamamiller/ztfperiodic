
import os, sys
import glob
import optparse

import tables
import pandas as pd
import numpy as np

import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 16})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("-c","--condorDir",default="/home/michael.coughlin/ZTF/output_quadrants_20191018/condor/")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

outputDir = os.path.join(opts.condorDir,"performance")
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

logsDir = os.path.join(opts.condorDir,"logs")

logfiles = glob.glob(os.path.join(logsDir,"out*"))
analysis_times, kowalski_times, objects = [], [], []
data_out = np.empty((0,4))
logfiles = logfiles[:1000]
for ii, logfile in enumerate(logfiles):
    if np.mod(ii,100) == 0:
        print('Loading %d/%d' % (ii, len(logfiles)))

    lines = [line.rstrip('\n') for line in open(logfile)]
    data = np.array([np.nan, np.nan, np.nan, np.nan])
    for line in lines:
        lineSplit = list(filter(None,line.split(" ")))
        if "Number of lightcurves" in line:
            data[0] = int(lineSplit[-1])
        elif "Lightcurve analysis" in line:
            data[1] = float(lineSplit[-2])        
        elif "Loaded" in line:
            data[2] = int(lineSplit[1])
            data[3] = int(lineSplit[-2])

    data_out = np.append(data_out,np.atleast_2d(data), axis=0)

plotName = os.path.join(outputDir, "period_finding.pdf")
plt.figure(figsize=(8,6))
ax = plt.gca()
plt.scatter(data_out[:,0], data_out[:,1], s=20, color='b')
plt.xlabel('Analysis Time [s]')
plt.ylabel('Number of objects')
ax.set_xscale('log')
ax.set_yscale('log')
plt.savefig(plotName)
plt.close()
print(stop)

filename = os.path.join(outputDir, "kowalski.dat")
fid = open(filename, 'w')
for t, o, f in zip(times, objects, fermiid):
    fid.write('%.5f %d %d\n' % (t,o,f))
fid.close()
