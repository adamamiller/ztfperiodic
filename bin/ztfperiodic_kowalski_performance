
import os, sys, pickle
import glob
import optparse

import tables
import pandas as pd
import numpy as np

import matplotlib
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 28})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
from matplotlib.colors import LogNorm

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()

    parser.add_option("-c","--condorDir",default="/home/michael.coughlin/ZTF/output_quadrants_20191018/condor/")

    opts, args = parser.parse_args()

    return opts

# Parse command line
opts = parse_commandline()

outputDir = os.path.join(opts.condorDir,"performance")
if not os.path.isdir(outputDir):
    os.makedirs(outputDir)

pcklFile = os.path.join(outputDir,"data.pkl")
logsDir = os.path.join(opts.condorDir,"logs1")

if not os.path.isfile(pcklFile):
    logfiles = glob.glob(os.path.join(logsDir,"*out*"))
    analysis_times, kowalski_times, objects = [], [], []
    data_out = np.empty((0,5))
    #logfiles = logfiles[:1000]
    for ii, logfile in enumerate(logfiles):
        print(logfile)
        if np.mod(ii,100) == 0:
            print('Loading %d/%d' % (ii, len(logfiles)))
    
        try:
            lines = [line.rstrip('\n') for line in open(logfile)]
        except:
            continue
     
        data = np.array([np.nan, np.nan, np.nan, np.nan, ii])
        for line in lines:
            lineSplit = list(filter(None,line.split(" ")))
            if "Number of lightcurves" in line:
                data[0] = int(lineSplit[-1])
            elif "Loaded" in line:
                data[2] = int(lineSplit[1])
                data[3] = float(lineSplit[-2])
            elif "Lightcurve analysis" in line:
                data[1] = float(lineSplit[-2])        
   
                data_out = np.append(data_out,np.atleast_2d(data), axis=0)
                data = np.array([np.nan, np.nan, np.nan, np.nan, ii])

    f = open(pcklFile, 'wb')
    pickle.dump((data_out), f)
    f.close()

with open(pcklFile, 'rb') as handle:
    data_out = pickle.load(handle)

xedges = np.logspace(1,3,50)
yedges = np.logspace(-2,1,50)

H, xedges, yedges = np.histogram2d(data_out[:,2], data_out[:,3], bins=(xedges, yedges))
H = H.T  # Let each row list bins with common y range.
X, Y = np.meshgrid(xedges, yedges)
H[H==0] = 1e-5

plotName = os.path.join(outputDir, "kowalski.pdf")
plt.figure(figsize=(12,8))
ax = plt.gca()
c = plt.pcolormesh(X, Y, H, vmin=1.0,vmax=np.max(H),norm=LogNorm())
plt.ylabel('Load Time [s]')
plt.xlabel('Number of objects')
cbar = plt.colorbar(c)
cbar.set_label('Counts')
ax.set_xscale('log')
ax.set_yscale('log')
#ax.set_xticks([10,100,1000])
plt.xlim([10,1000])
plt.ylim([3e-2,5])
#ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())

plt.savefig(plotName, bbox_inches='tight')
plt.close()

xedges = np.logspace(-1,2.0,50)
yedges = np.logspace(1,3.5,50)

idx = np.where(~np.isnan(data_out[:,0]))[0]
H, xedges, yedges = np.histogram2d(data_out[idx,1], data_out[idx,0], bins=(xedges, yedges))
H = H.T  # Let each row list bins with common y range.
X, Y = np.meshgrid(xedges, yedges)
H[H==0] = 1e-5

plotName = os.path.join(outputDir, "period_finding.pdf")
plt.figure(figsize=(12,8))
ax = plt.gca()
c = plt.pcolormesh(X, Y, H, vmin=1.0,vmax=np.max(H),norm=LogNorm())
plt.xlabel('Analysis Time [s]')
plt.ylabel('Number of objects')
cbar = plt.colorbar(c)
cbar.set_label('Counts')
ax.set_xscale('log')
ax.set_yscale('log')
plt.xlim([0.1,50])
plt.ylim([10,1000])
ax.set_xticks([0.1,1,10])
ax.set_yticks([10,100,1000])
ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())

plt.savefig(plotName, bbox_inches='tight')
plt.close()

print(stop)

ngpus = int(np.max(data_out[:,4]))
nlcurves = np.zeros((ngpus,1))
for ii in range(ngpus):
    idx = np.where(data_out[:,4] == ii)[0]
    nlcurves[ii] = np.nansum(data_out[idx,0]) / np.nansum(data_out[idx,1])

filename = os.path.join(outputDir,'scaling.npz')
np.savez(filename, nlcurves=nlcurves, data_out=data_out)

color1 = 'cornflowerblue'
color2 = 'coral'

nsamples = 500

fig = plt.figure(figsize=(14,8))
ax = plt.gca()
for ii in range(ngpus):
    vals = np.zeros((nsamples,1))
    cnt = ii + 1
    for jj in range(nsamples):    
        idx = np.random.permutation(np.arange(ngpus))
        idx = idx[:cnt]
        vals[jj] = np.sum(nlcurves[idx])

    parts = plt.violinplot(vals,[cnt],widths=0.25)
    for partname in ('cbars','cmins','cmaxes'):
        vp = parts[partname]
        vp.set_edgecolor(color1)
        vp.set_linewidth(1)
    for pc in parts['bodies']:
        pc.set_facecolor(color1)
        pc.set_edgecolor(color1)

#plt.xticks([2**0,2**1,2**2,2**3])
plt.grid()
plt.xlabel(r'Number of GPUs')
plt.ylabel('Lightcurves Analyzed per second')
ax.get_xaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter())

plotName = os.path.join(outputDir,'scaling.pdf')
plt.savefig(plotName, bbox_inches='tight')
plt.close()
